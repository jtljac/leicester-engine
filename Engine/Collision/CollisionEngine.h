//
// Created by jacob on 21/12/22.
//

#pragma once
#include <Scene/Actor/Actor.h>

#include <vector>

// We can't include the scene.h lest we want a circular dependency, forward decl instead
struct Scene;

/**
 * Collision information generated by the collision engine
 */
struct CollisionResult {
    /** Whether there was a collision at all */
    bool collided;
    /** How far into the collider the collision penetrated */
    float depth;
    /** The direction of the penetration */
    glm::vec3 normal;
};

/**
 * Interface for Narrow phase collision detection
 */
class CollisionEngine {
public:
    Scene* scene;

    /**
     * Get the actors that may be colliding with the given the actor
     * @param actor The actor to test
     * @param destPotentialActors A vector to store the potentially colliding actors in
     * @return true if there are any potential collisions
     */
    bool getNearbyColliders(Actor* actor, std::vector<Actor*>& destPotentialActors);

    /**
     * Test two actors for collision
     * @param actor1 The actor the collision test is for
     * @param actor2 The actor the collision test is against
     * @return The information about the two actors collision
     */
    virtual CollisionResult testCollision(Actor* actor1, Actor* actor2) = 0;
};
